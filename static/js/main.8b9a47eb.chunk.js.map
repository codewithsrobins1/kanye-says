{"version":3,"sources":["Quote.js","QuoteList.js","App.js","serviceWorker.js","index.js"],"names":["Quote","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","src","getEmoji","Component","QuoteList","state","quotes","JSON","parse","window","localStorage","getItem","loading","seenQuotes","Set","map","j","handleClick","bind","length","getQuotes","numQuotesToGet","axios","get","res","newQuote","data","quote","has","console","log","push","id","uuid","setState","st","setItem","stringify","alert","delta","sort","a","b","alt","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2WAkEeA,G,yLA3DP,OAAIC,KAAKC,MAAMC,OAAS,GACb,UACAF,KAAKC,MAAMC,OAAS,GACpB,UACAF,KAAKC,MAAMC,OAAS,EACpB,UACAF,KAAKC,MAAMC,OAAS,EACpB,UACAF,KAAKC,MAAMC,OAAS,EACpB,UACAF,KAAKC,MAAMC,OAAS,EACpB,UAEA,Y,iCAMX,OAAIF,KAAKC,MAAMC,OAAS,GACd,2BACCF,KAAKC,MAAMC,OAAS,GACrB,0BACCF,KAAKC,MAAMC,OAAS,EACrB,wBACCF,KAAKC,MAAMC,OAAS,EACrB,0BACCF,KAAKC,MAAMC,OAAS,EACrB,0BACCF,KAAKC,MAAMC,OAAS,EACrB,sBAEA,wB,+BAOV,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,kBAAkBC,QAASJ,KAAKC,MAAMI,SACnD,0BAAMF,UAAU,cAAcG,MAAO,CAACC,YAAaP,KAAKQ,aAAcR,KAAKC,MAAMC,OACjF,uBAAGC,UAAU,oBAAoBC,QAASJ,KAAKC,MAAMQ,YAGzD,yBAAKN,UAAU,cACVH,KAAKC,MAAMS,MAGhB,yBAAKP,UAAU,gBACX,yBAAKQ,IAAKX,KAAKY,mB,GAxDfC,c,kCCGdC,G,kBAMF,WAAYb,GAAO,IAAD,8BACd,4CAAMA,KAEDc,MAAQ,CAETC,OAAQC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,WAAa,MAC5DC,SAAS,GAGb,EAAKC,WAAa,IAAIC,IAAI,EAAKT,MAAMC,OAAOS,KAAI,SAAAC,GAAC,OAAIA,EAAEhB,SACvD,EAAKiB,YAAc,EAAKA,YAAYC,KAAjB,gBAVL,E,iFAemB,IAA7B5B,KAAKe,MAAMC,OAAOa,QAElB7B,KAAK8B,c,sKAOLd,EAAS,G,YAEPA,EAAOa,OAAS7B,KAAKC,MAAM8B,gB,iCACbC,IAAMC,IAAI,0B,OAAtBC,E,OAEJC,EAAWD,EAAIE,KAAKC,MAEpBrC,KAAKuB,WAAWe,IAAIH,GAIpBI,QAAQC,IAAI,qBAHZxB,EAAOyB,KAAK,CAAEC,GAAIC,MAAQjC,KAAMyB,EAAUjC,MAAO,I,uBAMrDF,KAAK4C,UAAS,SAAAC,GAAE,MAAK,CACjBvB,SAAS,EAETN,OAAO,GAAD,mBAAM6B,EAAG7B,QAAWA,OAG9B,kBAAMG,OAAOC,aAAa0B,QAAQ,SAAU7B,KAAK8B,UAAU,EAAKhC,MAAMC,Y,kDAGlEgC,MAAM,EAAD,IACLhD,KAAK4C,SAAS,CAACtB,SAAS,I,oJAM5BtB,KAAK4C,SAAS,CAACtB,SAAS,GAAOtB,KAAK8B,a,iCAG7BY,EAAIO,GAAO,IAAD,OACjBjD,KAAK4C,UACD,SAAAC,GAAE,MAAK,CAIH7B,OAAQ6B,EAAG7B,OAAOS,KAAI,SAAAC,GAAC,OACnBA,EAAEgB,KAAOA,EAAT,eAAkBhB,EAAlB,CAAqBxB,MAAOwB,EAAExB,MAAQ+C,IAASvB,SAGvD,kBAAMP,OAAOC,aAAa0B,QAAQ,SAAU7B,KAAK8B,UAChD,EAAKhC,MAAMC,c,+BAIX,IAAD,OAEJ,GAAGhB,KAAKe,MAAMO,QACV,OACI,yBAAKnB,UAAU,qBACX,uBAAGA,UAAU,+BACb,wBAAIA,UAAU,mBAAd,eAOZ,IAAIa,EAAShB,KAAKe,MAAMC,OAAOkC,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAElD,MAAQiD,EAAEjD,SACzD,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,qBACX,wBAAIA,UAAU,mBAAkB,uCAAhC,SACA,yBAAKQ,IAAI,wDAAwD0C,IAAI,KACrE,4BAAQlD,UAAU,oBAAoBC,QAASJ,KAAK2B,aAApD,eAGJ,yBAAKxB,UAAU,oBAEVa,EAAOS,KAAK,SAAAC,GAAC,OACV,kBAAC,EAAD,CACA4B,IAAK5B,EAAEgB,GACPxC,MAAOwB,EAAExB,MACTQ,KAAMgB,EAAEhB,KACRL,OAAQ,kBAAM,EAAKkD,WAAW7B,EAAEgB,GAAI,IACpCjC,SAAU,kBAAM,EAAK8C,WAAW7B,EAAEgB,IAAK,e,GA5GvC7B,cAAlBC,EAEK0C,aAAe,CAClBzB,eAAgB,IAiHTjB,Q,MC9GA2C,MARf,WACE,OACE,yBAAKtD,UAAU,OACb,kBAAC,EAAD,QCKcuD,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.8b9a47eb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Quote.css'\r\n\r\nclass Quote extends Component{\r\n\r\n    //Change the Color of Vote Border based on number of upvotes\r\n    getColor(){\r\n        if (this.props.votes >= 15){\r\n            return \"#4CAF50\";\r\n        } else if (this.props.votes >= 12) {\r\n            return \"#8BC34A\";\r\n        } else if (this.props.votes >= 9) {\r\n            return \"#CDDC39\";\r\n        } else if (this.props.votes >= 6) {\r\n            return \"#FFEB3B\";\r\n        } else if (this.props.votes >= 3) {\r\n            return \"#FFC107\";\r\n        } else if (this.props.votes >= 0) {\r\n            return \"#FF9800\";\r\n        } else {\r\n            return \"#F44336\"\r\n        }\r\n    }\r\n\r\n    //Change the Ye-Emoji Icon based on number of upvotes\r\n    getEmoji(){\r\n        if (this.props.votes >= 15){\r\n            return `/imgs/kanye-laughing.png`;\r\n        } else if (this.props.votes >= 12) {\r\n            return `/imgs/kanye-smiling.png`;\r\n        } else if (this.props.votes >= 9) {\r\n            return `/imgs/kanye-smirk.png`;\r\n        } else if (this.props.votes >= 6) {\r\n            return `/imgs/kanye-shocked.png`;\r\n        } else if (this.props.votes >= 3) {\r\n            return `/imgs/kanye-neutral.png`;\r\n        } else if (this.props.votes >= 0) {\r\n            return `/imgs/kanye-sad.png`;\r\n        } else {\r\n            return `/imgs/kanye-mad.png`;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Quote\">\r\n                <div className=\"Quote-buttons\">\r\n                    <i className=\"fas fa-arrow-up\" onClick={this.props.upvote} />\r\n                    <span className=\"Quote-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\r\n                    <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}/>\r\n                </div>\r\n\r\n                <div className=\"Quote-text\">\r\n                    {this.props.text}\r\n                </div>\r\n\r\n                <div className=\"Quote-smiley\">\r\n                    <img src={this.getEmoji()} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from 'react'\r\nimport Quote from './Quote.js'\r\nimport axios from 'axios';\r\nimport uuid from 'uuid/v4'\r\nimport './QuoteList.css';\r\n\r\nclass QuoteList extends Component{\r\n    //Default Props\r\n    static defaultProps = {\r\n        numQuotesToGet: 10\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //Get Items from local storage under quotes; if nothing parse the string which is going to turn in an empty array\r\n        this.state = { \r\n            //Parse takes a JSON string and turns into a JS object\r\n            quotes: JSON.parse(window.localStorage.getItem(\"quotes\") || \"[]\" ),\r\n            loading: false\r\n\r\n        }\r\n        this.seenQuotes = new Set(this.state.quotes.map(j => j.text)) //grab the string from the quotes\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    //Mounting\r\n    componentDidMount(){\r\n        if (this.state.quotes.length === 0)\r\n            //If empty, call getQuotes - dont want to override existing quotes\r\n            this.getQuotes();\r\n    }\r\n\r\n    //Methods\r\n    async getQuotes(){\r\n        try{\r\n        //Load Quotes\r\n        let quotes = []; //start with empty array that's going to be filled up\r\n        //While Quotes array is < 10, grab 10 dad quotes and push into the quotes array\r\n        while(quotes.length < this.props.numQuotesToGet){\r\n            let res = await axios.get('https://api.kanye.rest');\r\n            \r\n        let newQuote = res.data.quote;\r\n        //If seenQuotes does not have the new Quote, push it in\r\n        if(!this.seenQuotes.has(newQuote)) {\r\n            quotes.push({ id: uuid(), text: newQuote, votes: 0}) //Need to make these an object\r\n        }\r\n        else {\r\n            console.log('Found a Duplicate')        \r\n        }\r\n    }\r\n        this.setState(st => ({\r\n            loading: false,\r\n            //Setstate to exsiting quotes and then all the new quotes coming in\r\n            quotes: [...st.quotes, ...quotes]\r\n        }),\r\n        //Local Storage - Stringify takes JS object and turns it into a JSON string\r\n        () => window.localStorage.setItem(\"quotes\", JSON.stringify(this.state.quotes))\r\n        );\r\n        } catch(e){\r\n            alert(e);\r\n            this.setState({loading: false})\r\n        }\r\n    }\r\n    \r\n    handleClick(){\r\n        //Set State for loading to be true\r\n        this.setState({loading: true}, this.getQuotes) //run getquotes after loading is set to true\r\n    }\r\n    \r\n    handleVote(id, delta){\r\n        this.setState(\r\n            st => ({\r\n                //Map over existing quotes and check is that id === to the id that we're looking for; if it is make a new object\r\n                    //containing the old information but we update the votes\r\n                    //Otherwise not the correct one we just add the existing quote to the array\r\n                quotes: st.quotes.map(j =>\r\n                    j.id === id ? {...j, votes: j.votes + delta} : j)\r\n            }), \r\n            //Second Arguement to keep quotes\r\n            () => window.localStorage.setItem(\"quotes\", JSON.stringify\r\n            (this.state.quotes))\r\n        )\r\n    }\r\n\r\n    render(){\r\n        //Loading Animation - For When Fetch Quote button is clicked\r\n        if(this.state.loading) {\r\n            return (\r\n                <div className='QuoteList-spinner'>\r\n                    <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n                    <h1 className=\"quoteList-title\">\r\n                        Loading...\r\n                    </h1>\r\n                </div>\r\n            )\r\n        }\r\n        {/* Sort based off number of votes, and then render - Want highest votes at the top */}\r\n        let quotes = this.state.quotes.sort((a,b) => b.votes - a.votes)\r\n        return (\r\n            <div className=\"QuoteList\">\r\n                <div className=\"QuoteList-sidebar\">\r\n                    <h1 className=\"QuoteList-title\"><span>Kanye</span> Says</h1>\r\n                    <img src=\"https://www.iconspng.com/uploads/kanye-west-angry.png\" alt=\"\"/>\r\n                    <button className=\"QuoteList-getmore\" onClick={this.handleClick}>Preach Ye!</button>\r\n                </div>\r\n                \r\n                <div className=\"QuoteList-quotes\">\r\n                    {/* Put each quote in a div */}\r\n                    {quotes.map( j => (\r\n                        <Quote\r\n                        key={j.id} \r\n                        votes={j.votes} \r\n                        text={j.text} \r\n                        upvote={() => this.handleVote(j.id, 1)}\r\n                        downvote={() => this.handleVote(j.id, -1)} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuoteList;","import React from 'react';\r\nimport QuoteList from './QuoteList.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <QuoteList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}